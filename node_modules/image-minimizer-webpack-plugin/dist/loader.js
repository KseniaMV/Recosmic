"use strict";

var _path = _interopRequireDefault(require("path"));

var _crypto = _interopRequireDefault(require("crypto"));

var _loaderUtils = _interopRequireDefault(require("loader-utils"));

var _schemaUtils = require("schema-utils");

var _webpack = _interopRequireDefault(require("webpack"));

var _minify = _interopRequireDefault(require("./minify"));

var _interpolateName = _interopRequireDefault(require("./utils/interpolate-name"));

var _loaderOptions = _interopRequireDefault(require("./loader-options.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isWebpack4 = () => {
  return _webpack.default.version[0] === '4';
};

module.exports = async function loader(content) {
  const options = _loaderUtils.default.getOptions(this);

  (0, _schemaUtils.validate)(_loaderOptions.default, options, {
    name: 'Image Minimizer Plugin Loader',
    baseDataPath: 'options'
  });
  const callback = this.async();

  const name = _path.default.relative(this.rootContext, this.resourcePath);

  if (options.filter && !options.filter(content, name)) {
    callback(null, content);
    return;
  }

  const input = content;
  let cache;
  const cacheData = {};
  let output;

  if (isWebpack4()) {
    // eslint-disable-next-line global-require
    const CacheEngine = require('./Webpack4Cache').default;

    cache = new CacheEngine(null, {
      cache: options.cache
    }, false, true);
    cacheData.cacheKeys = {
      // eslint-disable-next-line global-require
      'image-minimizer-webpack-plugin': require('../package.json').version,
      'image-minimizer-webpack-plugin-options': options,
      name,
      contentHash: _crypto.default.createHash('md4').update(input).digest('hex')
    };
    output = await cache.get(cacheData);
  }

  if (!output) {
    const {
      severityError,
      minimizerOptions
    } = options;
    const minifyOptions = {
      input,
      filename: name,
      severityError,
      minimizerOptions,
      isProductionMode: this.mode === 'production' || !this.mode
    };
    output = await (0, _minify.default)(minifyOptions);

    if (output.errors && output.errors.length > 0) {
      output.errors.forEach(warning => {
        this.emitError(warning);
      });
      callback(null, content);
      return;
    }

    output.source = output.output;

    if (isWebpack4()) {
      await cache.store({ ...output,
        ...cacheData
      });
    }
  }

  if (output.warnings && output.warnings.length > 0) {
    output.warnings.forEach(warning => {
      this.emitWarning(warning);
    });
  }

  const {
    source
  } = output;
  const newName = (0, _interpolateName.default)(name, options.filename || '[path][name][ext]');
  const isNewAsset = name !== newName;

  if (isNewAsset) {
    this.emitFile(newName, source, null, {
      minimized: true
    });

    if (options.deleteOriginalAssets) {// TODO remove original asset
    }

    callback(null, content);
    return;
  }

  callback(null, source);
};

module.exports.raw = true;